(ns logical-interpreter)
(require '[clojure.string :as str])
(def patron-base #"\w+\(\w+(, \w+)*\)")

(defn split-string
	"Splits input string"
	[string]
	(str/split string #"\."))

(defn vectorize-array
	"Recursively creates new vector from the previous array"
	[coll array index]
	(if (< index 0) coll 
	(assoc (vectorize-array coll array (- index 1)) index (nth (nth array index) 0)
)))	



(defn has-patterns?
	"Chequea patrones del string"
	[string]
	(if (= 2 (count (re-find patron-base string))) true false))

(defn invalid-query?
	"Checks if the string has the same pattern as a rule/fact"
	[string]
	(if (= (re-find patron-base string) nil) true false))


(defn broken-database?
	"Checks if the string contains a valid database or not."
	[string-database]
	(let [array (split-string (str/replace string-database "\n" ""))]
		(if (not= 0 (count (remove has-patterns? array))) true false)
	)
)

(defn invalid-inputs? 
	"Checks if the database and query are valid. Returns true if any of them are invalid. Otherwise returns false."
	[database query]
	(if (or (broken-database? database) (invalid-query? query)) true false))

(defn validate
	"Validates both inputs"
	[database query]
	(if (invalid-inputs? database query) nil "Valid"))


(defn is-fact?
	"Checks if string is fact or not."
	[string]
	(if-not (re-find #":-" string) true false))

(defn filter-facts
	"Filters facts from the array"
	[array]
	(filter is-fact? array))

(defn map-input-facts
	"Recursively creates a map for the input facts"
	[map array index]
	(if (< index 0) map 
	(assoc (map-input-facts map array (- index 1)) (nth array index) 1)))	

(defn create-fact-map
	"Combino todo lo anterior. Recibo un string y llego a un diccionario de facts"
	[string]
	(let [array-filtrado (filter-facts (split-string (str/replace string "\n" "")))]
	(map-input-facts {} array-filtrado (- (count array-filtrado) 1)))
)

(defn check-fact
	"Chequeo si el fact pasado esta o no en el mapa de facts"
	[map fact]
	(if (= (get map fact) 1) true false))

(defn evaluate-fact
	"Search the database for the query"
	[string-database query]
	(check-fact (create-fact-map string-database) query))
	

(defn recursive-eval
	[database array index]
	(if (= index (count array)) true
	(if	(evaluate-fact database (nth array index))
	(recursive-eval database array (+ index 1))
	false)))
	

(defn evaluate-multiple-facts
	"Search the database for multiple querys"
	[database queries]
	(recursive-eval database queries 0))
	

(defn get-rule-name
	"Obtengo el nombre de la regla (validada) pasada por parametro"
	[rule]
	(nth (str/split rule #"\(") 0))


(defn is-rule?
	"Checks if string is rule or not"
	[string]
	(if (re-find #":-" string) true false))

(defn filter-rules
	"Filters facts from the array"
	[array]
	(filter is-rule? array))


(defn map-input-rules
	"Recursively creates a map for the input rules"
	[map array index]
	(if (< index 0) map 
	(assoc (map-input-rules map array (- index 1)) (get-rule-name (nth array index)) (nth array index))))	


(defn create-rule-map
	"Combino todo lo anterior. Recibo un string y llego a un diccionario de rules"
	[string]
	(let [array-filtrado (filter-rules (split-string (str/replace string "\n" "")))]
	(map-input-rules {} array-filtrado (- (count array-filtrado) 1)))
)


(defn search-rule
	"Searches for rule in map"
	[map rule]
	(get map (get-rule-name rule)))

(defn get-rule-definition
	"Gets left side of a rule"
	[rule]
	(nth (str/split rule #" :-") 0))

(defn same-number-parameters
	"Checks if a DB-rule and a Query-rule have the same number of parameters"
	[db-rule q-rule]
	(= (count (str/split (get-rule-definition db-rule) #",")) (count (str/split q-rule #","))))
	


(defn get-parameters
	"Returns an array with the parameters of the string"
	[string]
	(str/split (str/replace (re-find #"\([^)]+\)" string) #"[ ()]" "") #","))


(defn replace-many-times
	"Replaces in string the elements of coll1 by the ones in coll2"
	[string coll1 coll2 index]
	(if (< index 0) string
	(str/replace (replace-many-times string coll1 coll2 (- index 1)) (nth coll1 index) (nth coll2 index))
	)
)	

(defn replace-parameters
	"Replaces the parameters of the rule in the database that corresponds to the query. PRE: The query is valid"
	[database query]
	(let [rule (search-rule (create-rule-map database) query)]
	(replace-many-times rule (get-parameters rule) (get-parameters query) (- (count (get-parameters rule)) 1))))



(defn decompose-rule
	"Breaks the rule in facts to evaluate"
	[rule]
	(let [right-rule (nth (str/split rule #" :- ") 1)]
	(vectorize-array [] (re-seq patron-base right-rule) (- (count(re-seq patron-base right-rule)) 1) )
))

(defn evaluate-rule
	"Searches the database for the query and evaluates the rule"
	[database query]
	(let [rule (search-rule (create-rule-map database) query)]
	(if rule 
	(if (same-number-parameters rule query)
	(evaluate-multiple-facts database (decompose-rule (replace-parameters database query)))
	false)
	false)))

(defn normal-query
	"A simple query. It has already been validated."
	[database query]
	(or (evaluate-fact database query) (evaluate-rule database query)))


(defn evaluate-query
  "Returns true if the rules and facts in database imply query, false if not. If
  either input can't be parsed, returns nil"
  [database query]
  (if (invalid-inputs? database query) nil (normal-query database query))

)
